'***************************************************************
' Sub: MoveFilestoSFTP
'
' Description:
' This macro automates the process of copying Excel files (ending with .xlsx)
' from a source folder to one or more destination folders based on information
' provided on two worksheets: "MasterSheet" and "SFTP".
'
' How It Works:
' 1. It reads the source folder path from cell B6 on the "MasterSheet".
' 2. It reads a date from cell B2 on the "MasterSheet" and formats it as yyyymmdd.
' 3. It then loops through each row in the "SFTP" worksheet (starting at row 2,
'    assuming row 1 contains headers). For each row:
'       - Column A contains the client name.
'       - Column B contains the destination folder path.
'       - Column C is used as a flag ("YES" or "NO") to determine whether to
'         process that row.
' 4. For rows with "YES" in column C:
'       - The file name is constructed using the formatted date, an underscore,
'         then the client name, and finally ".xlsx" (e.g., "20250310_ClientA.xlsx").
'       - The macro checks if the source file exists in the specified source folder.
'       - If the file exists, it ensures that the destination folder exists (and
'         creates it if necessary), then copies the file to the destination folder.
'       - A counter is incremented for each successful copy.
'       - If the file does not exist, a message box notifies the user immediately.
' 5. After processing all rows, a summary message box confirms how many files were
'    copied successfully.
'
' Usage:
' - Customize the file naming convention or add extensions as needed.
' - Ensure that the folder paths in "MasterSheet" and "SFTP" are correct.
'
' Note:
' - This macro uses the VBA FileCopy statement to copy files. This means that 
'   the file in the source folder remains unchanged, and a duplicate is created 
'   in the destination folder.
' - The macro is case-insensitive for the "YES"/"NO" flag.
'***************************************************************

Sub MoveFilestoSFTP()
    Dim sourceFolder As String
    Dim destFolder As String
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim clientName As String
    Dim moveDate As String
    Dim fileName As String
    Dim sourceFilePath As String
    Dim destFilePath As String
    Dim moveFlag As String
    Dim filesCopied As Long
    
    ' Initialize the counter for copied files
    filesCopied = 0
    
    ' Read the source folder path from MasterSheet cell B6
    sourceFolder = ThisWorkbook.Worksheets("MasterSheet").Range("B6").Value
    ' Ensure the folder path ends with a backslash
    If Right(sourceFolder, 1) <> "\" Then
        sourceFolder = sourceFolder & "\"
    End If
    
    ' Get the date from MasterSheet cell B2 and format it as yyyymmdd
    moveDate = Format(ThisWorkbook.Worksheets("MasterSheet").Range("B2").Value, "yyyymmdd")
    
    ' Set the SFTP worksheet and find the last row in column A
    Set ws = ThisWorkbook.Worksheets("SFTP")
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Loop through each client in the SFTP list (assuming row 1 is headers)
    For i = 2 To lastRow
        ' Check if column C is set to YES (case-insensitive)
        moveFlag = UCase(Trim(ws.Cells(i, "C").Value))
        If moveFlag = "YES" Then
            ' Read client name from column A
            clientName = ws.Cells(i, "A").Value
            ' Build the file name: Date then an underscore then the client name, ending with .xlsx.
            ' Example file name: "20250310_ClientA.xlsx"
            fileName = moveDate & "_" & clientName & ".xlsx"
            
            ' Read the destination folder path from column B
            destFolder = ws.Cells(i, "B").Value
            ' Ensure the destination folder path ends with a backslash
            If Right(destFolder, 1) <> "\" Then
                destFolder = destFolder & "\"
            End If
            
            ' Build full file paths for source and destination
            sourceFilePath = sourceFolder & fileName
            destFilePath = destFolder & fileName
            
            ' Check if the source file exists before attempting to copy
            If Dir(sourceFilePath) <> "" Then
                ' Check if the destination folder exists; if not, create it
                If Dir(destFolder, vbDirectory) = "" Then
                    MkDir destFolder
                End If
                
                ' Copy the file from the source folder to the destination folder
                FileCopy sourceFilePath, destFilePath
                filesCopied = filesCopied + 1
            Else
                MsgBox "File " & sourceFilePath & " not found.", vbExclamation, "File Not Found"
            End If
        End If
    Next i
    
    ' Show a confirmation message after processing all files
    If filesCopied > 0 Then
        MsgBox filesCopied & " file(s) copied successfully.", vbInformation, "Copy Successful"
    Else
        MsgBox "No files were copied.", vbInformation, "Copy Result"
    End If
End Sub
